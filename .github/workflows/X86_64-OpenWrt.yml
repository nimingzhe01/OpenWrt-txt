name: X86_64 OpenWrt

on:
  workflow_dispatch:
  schedule:
    # 如果希望上海时间 19:00 运行，需 UTC 11:00；如不在意，可自行删除或修改
    - cron: '0 11 * * *'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  CONFIG_FILE: configs/x86_64.config
  # DIY脚本在仓库根目录
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(grep \"physical id\" /proc/cpuinfo | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(grep -m1 name /proc/cpuinfo | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) || true
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY || true
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) || true
        sudo -E apt-get -y autoremove --purge || true
        sudo -E apt-get -y clean || true
        sudo timedatectl set-timezone "$TZ" || true

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@v3

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        echo "OPENWRT_PATH=$GITHUB_WORKSPACE/openwrt" >> $GITHUB_ENV
        cd openwrt
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        # 复制 config，使用绝对路径
        if [ -f "$GITHUB_WORKSPACE/${CONFIG_FILE}" ]; then
          cp "$GITHUB_WORKSPACE/${CONFIG_FILE}" "$OPENWRT_PATH/.config"
        else
          echo "Error: CONFIG_FILE not found at $GITHUB_WORKSPACE/${CONFIG_FILE}"
          exit 1
        fi
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        # 提取 SOURCE_REPO
        SOURCE_REPO=$(basename -s .git $REPO_URL)
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        # 提取 DEVICE_TARGET / DEVICE_SUBTARGET
        DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | cut -d'"' -f2 || echo x86)
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | cut -d'"' -f2 || echo generic)
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        # 如果有 files 目录，移动到 openwrt/files
        if [ -d "$GITHUB_WORKSPACE/files" ]; then
          mv "$GITHUB_WORKSPACE/files" "$OPENWRT_PATH/files"
        fi

        # 复制 config（再确认一次）
        if [ -f "$GITHUB_WORKSPACE/${CONFIG_FILE}" ]; then
          cp "$GITHUB_WORKSPACE/${CONFIG_FILE}" "$OPENWRT_PATH/.config"
        else
          echo "Error: CONFIG_FILE not found at $GITHUB_WORKSPACE/${CONFIG_FILE}"
          exit 1
        fi

        # 执行根目录下 diy-script.sh
        DIY_PATH="$GITHUB_WORKSPACE/${DIY_SCRIPT}"
        if [ -f "$DIY_PATH" ]; then
          chmod +x "$DIY_PATH"
          bash "$DIY_PATH"
        else
          echo "Warning: diy-script.sh not found at $DIY_PATH, skipping."
        fi

        # 执行 scripts/ 目录下其他 preset 脚本（如存在）
        for script in preset-clash-core.sh preset-terminal-tools.sh preset-adguard-core.sh; do
          SCRIPT_PATH="$GITHUB_WORKSPACE/scripts/$script"
          if [ -f "$SCRIPT_PATH" ]; then
            bash "$SCRIPT_PATH" $CLASH_KERNEL
          else
            echo "Warning: $script not found at $SCRIPT_PATH, skipping."
          fi
        done

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j$(nproc) || true
        find dl -size -1024c -exec rm -f {} \; || true

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings || true
        echo "使用 $(nproc) 线程编译"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory (可选)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Collect Firmware Info
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/x86/64
        echo "当前工作目录: $(pwd)"
        echo "列出固件镜像文件："
        ls *.img *.bin *.efi *.img.gz || echo "未找到常见固件，请检查路径和后缀"
        if ls *.manifest 1> /dev/null 2>&1; then
          KVER=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')
        else
          KVER="unknown"
        fi
        echo "KERNEL=$KVER" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$(pwd)" >> $GITHUB_ENV

    - name: Upload Firmware Artifacts
      if: steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: |
          ${{ env.FIRMWARE_PATH }}/*.img
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.efi
          ${{ env.FIRMWARE_PATH }}/*.img.gz

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          ${{ env.FIRMWARE_PATH }}/*.img
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.efi
          ${{ env.FIRMWARE_PATH }}/*.img.gz
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 最后一次更新记录:
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
